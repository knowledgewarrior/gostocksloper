package main

import (
    "fmt"
    "bufio"
    "database/sql"
	_ "github.com/mattn/go-sqlite3"
    //"github.com/coopernurse/gorp"
	//"time"
	 "log"
	 "os"
)

type CreateDBFunc func(string)

func createDB(s string) {
    //fmt.Printf("%s\n", s)
    os.Remove(s+".db")
    db, err := sql.Open("sqlite3", s+".db")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	_, err = db.Exec("CREATE TABLE stockhistory (id INTEGER NOT NULL PRIMARY KEY, symbol TEXT, ydate TEXT, volume INTEGER, close, INTEGER);")
    if err != nil {
        log.Fatalln("could not create table:", err)
    }
    _, err = db.Exec("CREATE TABLE slopedata (id INTEGER NOT NULL PRIMARY KEY, symbol TEXT, slope FLOAT64, tradingdays INTEGER);")
    if err != nil {
        log.Fatalln("could not create table:", err)
    }
}


func main() {
    symbols, err := readLines("test-symbols.txt")
  	if err != nil {
    log.Fatalf("readLines error reading: %s", err)
  }
  	for _, symbol := range symbols {
    fmt.Println(symbol)

    var cdb CreateDBFunc
    cdb = createDB
    cdb(symbol)
  }
    

}

func readLines(path string) ([]string, error) {
  file, err := os.Open(path)
  if err != nil {
    return nil, err
  }
  defer file.Close()

  var lines []string
  scanner := bufio.NewScanner(file)
  for scanner.Scan() {
    lines = append(lines, scanner.Text())
  }
  return lines, scanner.Err()
}



//func createDb() {
 //    os.Remove("./stocks.db")

	// db, err := sql.Open("sqlite3", "./stocks.db")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// defer db.Close()

	// sql := `
	// create table stocks (symbol text);
	// delete from stocks;
	// `
	// _, err = db.Exec(sql)
	// if err != nil {
	// 	log.Printf("%q: %s\n", err, sql)
	// 	return
	// }

	// tx, err := db.Begin()
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// insert_stmt, err := tx.Prepare("insert into stocks(symbol) values(?)")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// defer insert_stmt.Close()
	// 	_, err = insert_stmt.Exec(symbol)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// tx.Commit()
	
	// rows, err := db.Query("select symbol from stocks")
	// if err != nil {
	// 	log.Fatal(err)
	// }
	// defer rows.Close()
	// for rows.Next() {
	// 	var symbol string
	// 	rows.Scan(&symbol)
	// 	fmt.Println(symbol)
	// }
	// rows.Close()
	//}
	


